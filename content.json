{"meta":{"title":"Zihan Li","subtitle":null,"description":null,"author":"Zihan Li","url":"http://lizihan021.github.io"},"pages":[{"title":"blogs","date":"2019-02-21T07:21:22.000Z","updated":"2024-09-08T04:25:02.118Z","comments":true,"path":"blogs/index.html","permalink":"http://lizihan021.github.io/blogs/index.html","excerpt":"","text":""},{"title":"","date":"2024-09-14T04:05:48.967Z","updated":"2024-09-14T04:05:48.967Z","comments":true,"path":"about/index.html","permalink":"http://lizihan021.github.io/about/index.html","excerpt":"","text":"About me:I’m a senior software engineer working at Snowflake."}],"posts":[{"title":"数据密集型应用系统设计2021-9-5","slug":"数据密集型应用系统设计2021-9-5","date":"2021-09-05T07:00:00.000Z","updated":"2024-09-08T04:25:02.118Z","comments":true,"path":"2021/09/05/数据密集型应用系统设计2021-9-5/","link":"","permalink":"http://lizihan021.github.io/2021/09/05/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A12021-9-5/","excerpt":"MapReduce map (collect) reduce (fold or inject) cypher 查询语言是用来查询图状数据。 RDF Resource Description Framework Sparql 查询三元储存的数据 Datalog: cascalog 是用于查询 Hadoop大数据集的datalog 实现 Datalog 类似于三元存储的数据，但是更通用一些，采用 谓语（主体，客体）的表达方式而不是（主体，谓语，客体）。 Example：name(namerica, ‘North America’).type(namerica, continent). datalog 是 prolog 的子集","text":"MapReduce map (collect) reduce (fold or inject) cypher 查询语言是用来查询图状数据。 RDF Resource Description Framework Sparql 查询三元储存的数据 Datalog: cascalog 是用于查询 Hadoop大数据集的datalog 实现 Datalog 类似于三元存储的数据，但是更通用一些，采用 谓语（主体，客体）的表达方式而不是（主体，谓语，客体）。 Example：name(namerica, ‘North America’).type(namerica, continent). datalog 是 prolog 的子集 End at page 50","categories":[{"name":"blogs","slug":"blogs","permalink":"http://lizihan021.github.io/categories/blogs/"}],"tags":[]},{"title":"数据密集型应用系统设计2021-8-31","slug":"数据密集型应用系统设计2021-8-31","date":"2021-08-31T07:00:00.000Z","updated":"2024-09-08T04:25:02.118Z","comments":true,"path":"2021/08/31/数据密集型应用系统设计2021-8-31/","link":"","permalink":"http://lizihan021.github.io/2021/08/31/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A12021-8-31/","excerpt":"层次模型：JSON。language：IMD，缺点是很难表示多对多的关系。替代方案：relational model ： SQLnetwork model ： CODASYL SQL 是声明式语言IMD，CODASYL 是命令式","text":"层次模型：JSON。language：IMD，缺点是很难表示多对多的关系。替代方案：relational model ： SQLnetwork model ： CODASYL SQL 是声明式语言IMD，CODASYL 是命令式 End at page 50","categories":[{"name":"blogs","slug":"blogs","permalink":"http://lizihan021.github.io/categories/blogs/"}],"tags":[]},{"title":"数据密集型应用系统设计2021-8-30","slug":"数据密集型应用系统设计2021-8-30","date":"2021-08-30T07:00:00.000Z","updated":"2024-09-08T04:25:02.118Z","comments":true,"path":"2021/08/30/数据密集型应用系统设计2021-8-30/","link":"","permalink":"http://lizihan021.github.io/2021/08/30/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A12021-8-30/","excerpt":"负载可以用负载参数来描述，例子： web server 每秒请求 数据库中写入的比例 聊天室同时活动用户数 缓存命中率","text":"负载可以用负载参数来描述，例子： web server 每秒请求 数据库中写入的比例 聊天室同时活动用户数 缓存命中率 有时平均值重要，有时峰值重要。 例子：twitter用户可以推送新消息到所有关注者，平均大约4.6K req&#x2F;s。峰值12K req&#x2F;s。有两种方案： 存入关系数据库，一个用户需要看他的时间线的时候去db里query 对每个用户的时间线维护一个缓存，发推时直接存入 最后twitter结合了两个方案，对于一般用户的帖子，采取方法二，但是对于关注者众多的名人，采用方案一。 latency usually refer to time spent on processingresponse time usually refer to end to end time duration between a user’s query and its response. Servie Level Agreements (SLA) might be used to enfore service quality for customer. 响应时间每增加100ms，销售额就会下降百分之1. 快速迭代推出产品功能往往比投入精力来应对不可知的扩展性更为重要。 可维护性： 可运维性 简单性 可塑性 一个优秀的运维团队至少负责以下内容： 监视系统的健康状况，并在服务出现异常时快速恢复 跟踪问题的原因 保持软件和平台最新，例如打安全补丁 了解不同的系统如何相互影响，避免执行破坏性的操作 预测未来可能的问题 建立部署，配置管理等工具包 平台迁移 monitor 配置 制定流程 保持知识传承 简单性：抽象 可塑性：micro services End at page 33","categories":[{"name":"blogs","slug":"blogs","permalink":"http://lizihan021.github.io/categories/blogs/"}],"tags":[]},{"title":"数据密集型应用系统设计2021-8-29","slug":"数据密集型应用系统设计2021-8-29","date":"2021-08-29T07:00:00.000Z","updated":"2024-09-08T04:25:02.118Z","comments":true,"path":"2021/08/29/数据密集型应用系统设计2021-8-29/","link":"","permalink":"http://lizihan021.github.io/2021/08/29/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A12021-8-29/","excerpt":"数据密集型应用系统模块： 数据库 高速缓存 索引 流处理 批处理 大多软件系统的三个重要问题： 可靠性 可扩展性 可维护性","text":"数据密集型应用系统模块： 数据库 高速缓存 索引 流处理 批处理 大多软件系统的三个重要问题： 可靠性 可扩展性 可维护性 可靠性的典型期望： 执行用户期望的功能 容忍用户不正确的操作和错误 性能可以应对典型场景，负载压力和数据量 防止任何未授权的访问和滥用 硬件故障类型：硬盘平均无故障时间MTTF 10~50 年， 因此在一个10000个硬盘的阵列中，平均每天会有一个硬盘故障, 解决的办法是增加硬件冗余。其他硬件故障包括：断电，断网，内存故障，cpu计算错误 软件错误：more test please 如何减少人为的失误： 以最小出错的方式来设计系统，例如精心设计的抽象层，api和管理界面。是的做正确的事很轻松而搞坏东西很复杂 分离容易出错的部分，提供测试沙箱 test 当出现人为错误时，提供快速的恢复机制 telemetry 管理流程以及培训 End at page 18","categories":[{"name":"blogs","slug":"blogs","permalink":"http://lizihan021.github.io/categories/blogs/"}],"tags":[]},{"title":"DIY Marty the Robot","slug":"marty","date":"2019-06-21T06:21:22.000Z","updated":"2024-09-14T04:09:02.697Z","comments":true,"path":"2019/06/20/marty/","link":"","permalink":"http://lizihan021.github.io/2019/06/20/marty/","excerpt":"Marty the Robot is a robot designed and manufactured by myself. Marty is 3D printed and is controlled by a Raspberry Pi and 9 servos. The robot could be used for programming education purpose.","text":"Marty the Robot is a robot designed and manufactured by myself. Marty is 3D printed and is controlled by a Raspberry Pi and 9 servos. The robot could be used for programming education purpose. I used Siemens NX for CAD and 3D printed all the parts. Control system was based on Raspberry Pi and PCA9685 with I2C protocol. Marty was able to perform face detection with OpenCV and walk towards its owner. High level API was implemented for controlling the robot such as walk(),dance() etc. System Implementation1. SetupHardware: 8mm*M3 screws a 3D printer with plenty of PLA SG90 Servo *9 PCA9685 module Raspberry Pi 3 B+ Pi Camera 500 mAh, 11.1 V Li-battery voltage reduction module 11.1 V to 6 V Software: When you buy a raspberrypi, it’s just a bare board without any operating system. Let’s assume you have already installed latest Raspbian OS on your raspberrypi and and have succesfully remote control your pi. If you haven’t yet finished, please follow the instruction below to initialize your raspberrypi:http://yesyzq.github.io/2016/01/09/raspberry/Make sure that you have network environment for raspberry pi to work properly. In case you are not familiar with Linux command:http://yesyzq.github.io/2016/01/17/Linux%E5%91%BD%E4%BB%A4%E4%BB%A5%E5%8F%8A%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%95%B4%E7%90%86/You may also refer to any other guide online. There are always abundant resources waiting for you to explore on the internet. 2. Implementation:Hardware:I 3D printed all the parts that are needed to build Marty. The parts are designed using UG NX 10.0 and are exported to .stl files. Then those .stl files are used to generate .gcode or .pcode using slicing softwares.That is what marty is going to look like. (I’m too lazy to assemble another leg …)The following are all the files:You need to export *.prt files to *.stl files for 3D printing.You need to print: 12 pieces of MMarty1.prt - connecting bar 8 pieces of marty4.prt —– supporting plate 4 pieces of marty3.prt —– servo connecting bar 2 pieces of marty2.prt —– third servo 2 pieces of marty5.prt —– feet of marty 2 pieces of marty6.prt —– second servo 2 pieces of marty7.prt —– first servo 2 pieces of shou.prt ——- arms of marty 2 pieces of yanjing.prt —- eyes of marty 1 piece of body.prt ——— body of marty Then with the parts, you can assemble marty: I also added a speaker on Marty: Software:I. Install OpenCVTo make Marty capable of face detecting, we install openCV-3.0.0 in Pi 3. The tutorial is mainly based on this tutorial Notice you need to run this line of code to solve the depencence problem. sudo apt-get install build-essential libgtk2.0-dev libjpeg-dev libtiff5-dev libjasper-dev libopenexr-dev cmake python-dev python-numpy python-tk libeigen2-dev yasm libopencore-amrnb-dev libopencore-amrwb-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev libqt4-dev libqt4-opengl-dev sphinx-common texlive-latex-extra libv4l-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev libeigen3-dev II. DriverTo drive Marty, I wrote a library that contains basic instructions to control Marty. 123456789101112131415161718192021222324Main files: duo.py # this is the main driven program of marty. # it defines an object called duo which include following functions: # .dance(times, speed) to dance &quot;times&quot; times at &quot;speed&quot; speed # .walk(times, speed) to walk &quot;times&quot; times at &quot;speed&quot; speed # .turn(angle, speed) to turn &quot;angle&quot; at &quot;speed&quot; speed # .zhuanyan(times, range, speed) to rotate eyes with range &quot;range&quot; # .dongshou(times, jizhun, range, speed) to move hand at a base angle of # &quot;jizhun&quot; and range &quot;range&quot; face.py # this is the face detection file marty will take picture around every # 0.5 seconds. Pictures is under /pic folder. # If there is face detected, Marty will turn to the direction # of the face. If the face is far from Marty, it will walk toward the # direction of the face. # **this file must be run in cv environment** boom.py # this file serves as a example if you want to move Marty&#x27;s hand, eyes # and legs simultaniously. DO NOT TRY TO WALK AND DANCE SIMUTANIOUSLY, # BECAUSE THAT MIGHT CAUSE ERRORS. PCA9685.py video.py common.py and &lt;files in /xmlf&gt; come from 3rd party. other files are test files and serves as examples about how to control Marty. III. Open i2c communicationSearch i2c at /boot/config.txt and change the item to ‘on’. Then reboot. Check you have open i2c successfully by sudo i2cdetect -y 1 3. DEMOface detection by opencv: walking: turning: singing: dancing: pretend busy programming: face detecting, when marty see me, it will turn to my direction and move forward.however, his head is too heavy that he cannot move fluently.","categories":[{"name":"Robotics","slug":"Robotics","permalink":"http://lizihan021.github.io/categories/Robotics/"}],"tags":[]},{"title":"Umich Website Theme \"Menc\"","slug":"umich-web","date":"2017-12-21T07:21:22.000Z","updated":"2024-09-08T04:25:02.118Z","comments":true,"path":"2017/12/20/umich-web/","link":"","permalink":"http://lizihan021.github.io/2017/12/20/umich-web/","excerpt":"","text":"University of Michigan was planning to migrate its website content from Plone CMS to WordPress. Developed part of the Umich WordPress theme “Menc” during my intern.","categories":[{"name":"website","slug":"website","permalink":"http://lizihan021.github.io/categories/website/"}],"tags":[]},{"title":"SAA Website","slug":"saa-website","date":"2017-06-21T06:21:22.000Z","updated":"2024-09-08T04:25:02.118Z","comments":true,"path":"2017/06/20/saa-website/","link":"","permalink":"http://lizihan021.github.io/2017/06/20/saa-website/","excerpt":"","text":"SAA is Student Alumni Association of SJTU-UM JI. We made a website for the organization to demo what we have done during the year 2016. There are also resources made by former JI students shared on the website to give a quick intro to coming JI DD students. We made the website based on React and Meteor.","categories":[{"name":"website","slug":"website","permalink":"http://lizihan021.github.io/categories/website/"}],"tags":[]},{"title":"Umich Website Spider","slug":"umich-spider","date":"2017-04-21T06:21:22.000Z","updated":"2024-09-08T04:25:02.118Z","comments":true,"path":"2017/04/20/umich-spider/","link":"","permalink":"http://lizihan021.github.io/2017/04/20/umich-spider/","excerpt":"","text":"University of Michigan was planning to migrate its website content from Plone CMS to WordPress. I wrote a web spider to collect all posts from the original website during my intern to help the migration.","categories":[{"name":"blogs","slug":"blogs","permalink":"http://lizihan021.github.io/categories/blogs/"}],"tags":[]},{"title":"Roflcopter - Gesture Based Quad-copter Controller","slug":"roflcopter","date":"2017-03-21T06:21:22.000Z","updated":"2024-09-08T04:25:02.118Z","comments":true,"path":"2017/03/20/roflcopter/","link":"","permalink":"http://lizihan021.github.io/2017/03/20/roflcopter/","excerpt":"Abstract The project is a gesture based quad-copter controller. User can control a quad-copter by moving their hands. It is a course project we proposed for EECS 373 micro-controller based system.","text":"Abstract The project is a gesture based quad-copter controller. User can control a quad-copter by moving their hands. It is a course project we proposed for EECS 373 micro-controller based system. Given a pre-built quadcopter and its controller, we disassembled the controller for the quadcopter and replacing the buttons and analog sticks with outputs from gyroscopes and capacitive buttons. These components were attached to velcro hand wraps that the user can put on to control the drone.","categories":[{"name":"Embedded System","slug":"Embedded-System","permalink":"http://lizihan021.github.io/categories/Embedded-System/"}],"tags":[]}]}